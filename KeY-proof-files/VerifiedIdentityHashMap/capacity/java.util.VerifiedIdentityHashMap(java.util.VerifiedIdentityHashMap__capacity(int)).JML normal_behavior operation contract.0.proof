\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Oct 31 19:16:10 CET 2021
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , javaLoopTreatment-javaLoopTreatment\\:efficient
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]Timeout=-1
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\bootclasspath "../../../jre";

\javaSource "../../../src";

\include "../../../functions.key";

\proofObligation "#Proof Obligation Settings
#Sun Oct 31 19:16:10 CET 2021
contract=java.util.VerifiedIdentityHashMap[java.util.VerifiedIdentityHashMap\\:\\:capacity(int)].JML normal_behavior operation contract.0
name=java.util.VerifiedIdentityHashMap[java.util.VerifiedIdentityHashMap\\:\\:capacity(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "martindeboer" ) (keyVersion "40b2d39292"))

(autoModeTime "1199")

(branch "dummy ID"
(rule "insert_constant_value" (formula "1") (term "0,1,0,1,0") (newnames "expectedMaxSize,result,exc,heapAtPre,o,f"))
(rule "insert_constant_value" (formula "1") (term "1,0,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "6") (term "0,0,1,0,1"))
(rule "inEqSimp_gtToGeq" (formula "4"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
(rule "assignment" (formula "6") (term "1"))
(rule "sequentialToParallel2" (formula "6"))
(rule "simplifyUpdate3" (formula "6") (term "1,0"))
(rule "jdiv_axiom_inline" (formula "4") (term "0,1,0,0"))
(rule "mul_literals" (formula "4") (term "0,0,2,0,1,0,0"))
(rule "div_literals" (formula "4") (term "1,0,1,0,0"))
(rule "qeq_literals" (formula "4") (term "0,0,1,0,0"))
(rule "ifthenelse_true" (formula "4") (term "0,1,0,0"))
(rule "mul_literals" (formula "4") (term "1,0,0"))
(rule "add_literals" (formula "4") (term "0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "4"))
(rule "mul_literals" (formula "4") (term "1"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_capacity,savedHeapBefore_capacity"))
(rule "simplifyUpdate2" (formula "6") (term "1"))
(rule "returnUnfold" (formula "6") (term "1") (inst "#v0=x"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "x"))
(rule "condition" (formula "6") (term "1"))
(rule "ifElseUnfold" (formula "6") (term "1") (inst "#boolv=x_1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "x_1"))
(rule "remove_parentheses_right" (formula "6") (term "1"))
(rule "compound_greater_than_comparison_2" (formula "6") (term "1") (inst "#v1=x_3") (inst "#v0=x_2"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "x_2"))
(rule "assignment" (formula "6") (term "1"))
(rule "sequentialToParallel2" (formula "6"))
(rule "simplifyUpdate3" (formula "6") (term "1,0"))
(rule "applyOnElementary" (formula "6") (term "1,0"))
(rule "applyOnPV" (formula "6") (term "0,1,0"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "x_3"))
(rule "assignmentDivisionInt" (formula "6"))
(branch "Case 1"
   (rule "insert_constant_value" (formula "6") (term "0,0,0,1"))
   (rule "translateJavaDivInt" (formula "6") (term "0,0,1"))
   (rule "sequentialToParallel2" (formula "6"))
   (rule "simplifyUpdate3" (formula "6") (term "1,0"))
   (rule "greater_than_comparison_simple" (formula "6") (term "1"))
   (rule "sequentialToParallel2" (formula "6"))
   (rule "simplifyUpdate2" (formula "6"))
   (rule "simplifyUpdate3" (formula "6") (term "1,0"))
   (rule "applyOnElementary" (formula "6") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "6") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "6") (term "2,0,1,0"))
   (rule "simplifyUpdate1" (formula "6") (term "1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "6") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "6") (term "1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "6") (term "0,0,0,1,0"))
   (rule "applyOnPV" (formula "6") (term "1,0,0,1,0"))
   (rule "applyOnPV" (formula "6") (term "0,0,0,1,0"))
   (rule "inEqSimp_gtToGeq" (formula "6") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "6") (term "0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,0"))
   (rule "ifElseSplit" (formula "6"))
   (branch "if x_1 true"
      (rule "simplifyUpdate2" (formula "1"))
      (rule "simplifyUpdate2" (formula "7"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "ifthenelse_concrete3" (formula "1"))
      (rule "boolean_not_equal_2" (formula "1") (term "1"))
      (rule "concrete_or_4" (formula "1"))
      (rule "assignment" (formula "7") (term "1"))
      (rule "insert_constant_value" (formula "7") (term "0,0,1"))
      (rule "sequentialToParallel2" (formula "7"))
      (rule "simplifyUpdate3" (formula "7") (term "1,0"))
      (rule "blockEmpty" (formula "7") (term "1"))
      (rule "methodCallReturn" (formula "7") (term "1"))
      (rule "assignment" (formula "7") (term "1"))
      (rule "sequentialToParallel2" (formula "7"))
      (rule "simplifyUpdate2" (formula "7"))
      (rule "simplifyUpdate3" (formula "7") (term "1,0"))
      (rule "applyOnElementary" (formula "7") (term "1,0"))
      (rule "applyOnPV" (formula "7") (term "0,1,0"))
      (rule "methodCallEmpty" (formula "7") (term "1"))
      (rule "tryEmpty" (formula "7") (term "1"))
      (rule "emptyModality" (formula "7") (term "1"))
      (rule "applyOnRigidFormula" (formula "7"))
      (rule "simplifyUpdate2" (formula "7") (term "1"))
      (rule "simplifyUpdate2" (formula "7") (term "0"))
      (rule "applyOnRigidFormula" (formula "7") (term "1"))
      (rule "applyOnRigidFormula" (formula "7") (term "0"))
      (rule "simplifyUpdate2" (formula "7") (term "1,0"))
      (rule "simplifyUpdate2" (formula "7") (term "0,0"))
      (rule "applyOnRigidFormula" (formula "7") (term "0,1"))
      (rule "applyOnRigidFormula" (formula "7") (term "1,0"))
      (rule "applyOnPV" (formula "7") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "7") (term "1,1,0"))
      (rule "eqClose" (formula "7") (term "1,0"))
      (rule "concrete_and_3" (formula "7") (term "0"))
      (rule "applyOnRigidFormula" (formula "7") (term "0,0,1"))
      (rule "simplifyUpdate1" (formula "7") (term "1,0,0,1"))
      (rule "applyOnRigidFormula" (formula "7") (term "0"))
      (rule "simplifyUpdate2" (formula "7") (term "1,0"))
      (rule "replace_known_left" (formula "7") (term "1,0") (ifseqformula "6"))
      (rule "concrete_and_3" (formula "7") (term "0"))
      (rule "applyOnRigidTerm" (formula "7") (term "0,0,0,1"))
      (rule "applyOnPV" (formula "7") (term "0,0,0,0,1"))
      (rule "simplifyUpdate1" (formula "7") (term "1,0,0,0,1"))
      (rule "simplifyUpdate1" (formula "7") (term "2,0,0,0,1"))
      (rule "eqClose" (formula "7") (term "0,0,1"))
      (rule "applyOnRigidFormula" (formula "7") (term "0"))
      (rule "applyOnPV" (formula "7") (term "0,0"))
      (rule "simplifyUpdate1" (formula "7") (term "1,0"))
      (rule "eqClose" (formula "7") (term "0"))
      (rule "concrete_and_1" (formula "7"))
      (rule "allRight" (formula "7") (inst "sk=f_0"))
      (rule "allRight" (formula "7") (inst "sk=o_0"))
      (rule "closeTrue" (formula "7"))
   )
   (branch "if x_1 false"
      (rule "false_to_not_true" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "7"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnRigidFormula" (formula "6"))
      (rule "simplifyUpdate1" (formula "6") (term "1"))
      (rule "applyOnPV" (formula "6") (term "0"))
      (rule "ifthenelse_concrete3" (formula "6"))
      (rule "boolean_not_equal_2" (formula "6") (term "1"))
      (rule "concrete_or_4" (formula "6"))
      (rule "inEqSimp_leqRight" (formula "6"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
      (rule "polySimp_elimOne" (formula "1") (term "1"))
      (rule "elim_double_block_2" (formula "7") (term "1"))
      (rule "condition" (formula "7") (term "1"))
      (rule "ifElseUnfold" (formula "7") (term "1") (inst "#boolv=x_1"))
      (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_4"))
      (rule "remove_parentheses_right" (formula "7") (term "1"))
      (rule "compound_less_equal_than_comparison_2" (formula "7") (term "1") (inst "#v1=x_6") (inst "#v0=x_5"))
      (rule "variableDeclarationAssign" (formula "7") (term "1"))
      (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_5"))
      (rule "assignment" (formula "7") (term "1"))
      (rule "sequentialToParallel2" (formula "7"))
      (rule "simplifyUpdate3" (formula "7") (term "1,0"))
      (rule "applyOnElementary" (formula "7") (term "1,0"))
      (rule "applyOnPV" (formula "7") (term "0,1,0"))
      (rule "variableDeclarationAssign" (formula "7") (term "1"))
      (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_6"))
      (rule "compound_division_1" (formula "7") (term "1") (inst "#v=x_7"))
      (rule "variableDeclarationAssign" (formula "7") (term "1"))
      (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_7"))
      (rule "assignmentMultiplicationInt" (formula "7") (term "1"))
      (rule "insert_constant_value" (formula "7") (term "1,0,0,1"))
      (rule "translateJavaMulInt" (formula "7") (term "0,0,1"))
      (rule "sequentialToParallel2" (formula "7"))
      (rule "simplifyUpdate3" (formula "7") (term "1,0"))
      (rule "assignmentDivisionInt" (formula "7"))
      (branch "Case 1"
         (rule "translateJavaDivInt" (formula "7") (term "0,0,1"))
         (rule "sequentialToParallel2" (formula "7"))
         (rule "simplifyUpdate2" (formula "7"))
         (rule "simplifyUpdate3" (formula "7") (term "1,0"))
         (rule "applyOnElementary" (formula "7") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "7") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "7") (term "1,0,1,0"))
         (rule "applyOnPV" (formula "7") (term "0,0,1,0"))
         (rule "less_equal_than_comparison_simple" (formula "7") (term "1"))
         (rule "sequentialToParallel2" (formula "7"))
         (rule "simplifyUpdate2" (formula "7"))
         (rule "simplifyUpdate3" (formula "7") (term "1,0"))
         (rule "applyOnElementary" (formula "7") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "7") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "7") (term "2,0,1,0"))
         (rule "simplifyUpdate1" (formula "7") (term "1,0,1,0"))
         (rule "applyOnRigidFormula" (formula "7") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "7") (term "1,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "7") (term "0,0,0,1,0"))
         (rule "applyOnPV" (formula "7") (term "1,0,0,1,0"))
         (rule "applyOnPV" (formula "7") (term "0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,1,0"))
         (rule "ifElseSplit" (formula "7"))
         (branch "if x_4 true"
            (rule "simplifyUpdate2" (formula "8"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "ifthenelse_concrete3" (formula "1"))
            (rule "boolean_not_equal_2" (formula "1") (term "1"))
            (rule "concrete_or_4" (formula "1"))
            (rule "assignment" (formula "8") (term "1"))
            (rule "insert_constant_value" (formula "8") (term "0,0,1"))
            (rule "sequentialToParallel2" (formula "8"))
            (rule "simplifyUpdate3" (formula "8") (term "1,0"))
            (rule "blockEmpty" (formula "8") (term "1"))
            (rule "methodCallReturn" (formula "8") (term "1"))
            (rule "assignment" (formula "8") (term "1"))
            (rule "sequentialToParallel2" (formula "8"))
            (rule "simplifyUpdate2" (formula "8"))
            (rule "simplifyUpdate3" (formula "8") (term "1,0"))
            (rule "applyOnElementary" (formula "8") (term "1,0"))
            (rule "applyOnPV" (formula "8") (term "0,1,0"))
            (rule "methodCallEmpty" (formula "8") (term "1"))
            (rule "tryEmpty" (formula "8") (term "1"))
            (rule "emptyModality" (formula "8") (term "1"))
            (rule "applyOnRigidFormula" (formula "8"))
            (rule "simplifyUpdate2" (formula "8") (term "1"))
            (rule "simplifyUpdate2" (formula "8") (term "0"))
            (rule "applyOnRigidFormula" (formula "8") (term "1"))
            (rule "applyOnRigidFormula" (formula "8") (term "0"))
            (rule "simplifyUpdate2" (formula "8") (term "1,0"))
            (rule "simplifyUpdate2" (formula "8") (term "0,0"))
            (rule "applyOnRigidFormula" (formula "8") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "8") (term "1,0"))
            (rule "applyOnPV" (formula "8") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "8") (term "1,1,0"))
            (rule "eqClose" (formula "8") (term "1,0"))
            (rule "concrete_and_3" (formula "8") (term "0"))
            (rule "applyOnRigidFormula" (formula "8") (term "0,0,1"))
            (rule "simplifyUpdate1" (formula "8") (term "1,0,0,1"))
            (rule "applyOnRigidFormula" (formula "8") (term "0"))
            (rule "simplifyUpdate2" (formula "8") (term "1,0"))
            (rule "replace_known_left" (formula "8") (term "1,0") (ifseqformula "7"))
            (rule "concrete_and_3" (formula "8") (term "0"))
            (rule "applyOnRigidTerm" (formula "8") (term "0,0,0,1"))
            (rule "applyOnPV" (formula "8") (term "0,0,0,0,1"))
            (rule "simplifyUpdate1" (formula "8") (term "2,0,0,0,1"))
            (rule "simplifyUpdate1" (formula "8") (term "1,0,0,0,1"))
            (rule "eqClose" (formula "8") (term "0,0,1"))
            (rule "applyOnRigidFormula" (formula "8") (term "0"))
            (rule "applyOnPV" (formula "8") (term "0,0"))
            (rule "simplifyUpdate1" (formula "8") (term "1,0"))
            (rule "equal_literals" (formula "8") (term "0"))
            (rule "concrete_and_2" (formula "8"))
            (rule "false_right" (formula "8"))
            (rule "Static_class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "7"))
            (rule "notLeft" (formula "7"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "0") (ifseqformula "3"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "8"))
            (rule "concrete_or_2" (formula "1"))
            (rule "expand_inInt" (formula "5"))
            (rule "replace_int_MIN" (formula "5") (term "0,1"))
            (rule "replace_int_MAX" (formula "5") (term "1,0"))
            (rule "andLeft" (formula "5"))
            (rule "inEqSimp_commuteLeq" (formula "6"))
            (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "8"))
            (rule "leq_literals" (formula "6") (term "0"))
            (rule "concrete_or_1" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "expand_divJint" (formula "2") (term "0"))
            (rule "expand_divJint" (formula "3") (term "0"))
            (rule "jdiv_axiom_inline" (formula "3") (term "0,0"))
            (rule "div_literals" (formula "3") (term "1,0,0"))
            (rule "qeq_literals" (formula "3") (term "0,0,0"))
            (rule "ifthenelse_true" (formula "3") (term "0,0"))
            (rule "expand_mulJint" (formula "2") (term "0,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0,0"))
            (rule "expand_moduloInteger" (formula "3") (term "0"))
            (rule "replace_int_RANGE" (formula "3") (term "1,1,0"))
            (rule "replace_int_HALFRANGE" (formula "3") (term "0,0,1,0"))
            (rule "replace_int_MIN" (formula "3") (term "0,0"))
            (rule "add_literals" (formula "3") (term "0,1,0"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
            (rule "polySimp_rightDist" (formula "3") (term "1,0"))
            (rule "mul_literals" (formula "3") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "3") (term "0"))
            (rule "polySimp_addComm0" (formula "3") (term "0,0"))
            (rule "mod_axiom" (formula "3") (term "0,1,0"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
            (rule "div_literals" (formula "3") (term "0,1,0,1,0"))
            (rule "mul_literals" (formula "3") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "3") (term "0,1,0"))
            (rule "mul_literals" (formula "3") (term "1,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "add_literals" (formula "3") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "mul_literals" (formula "3") (term "1"))
            (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "3"))
            (rule "qeq_literals" (formula "7") (term "0"))
            (rule "concrete_and_2" (formula "7"))
            (rule "closeFalse" (formula "7"))
         )
         (branch "if x_4 false"
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "8"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "7"))
            (rule "simplifyUpdate1" (formula "7") (term "1"))
            (rule "applyOnPV" (formula "7") (term "0"))
            (rule "ifthenelse_concrete3" (formula "7"))
            (rule "boolean_not_equal_2" (formula "7") (term "1"))
            (rule "concrete_or_4" (formula "7"))
            (rule "inEqSimp_geqRight" (formula "7"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "elim_double_block_2" (formula "8") (term "1"))
            (rule "elim_double_block_2" (formula "8") (term "1"))
            (rule "methodCallWithAssignmentUnfoldArguments" (formula "8") (term "1"))
            (rule "variableDeclarationAssign" (formula "8") (term "1"))
            (rule "variableDeclaration" (formula "8") (term "1") (newnames "var"))
            (rule "compound_addition_2" (formula "8") (term "1") (inst "#v1=x_2") (inst "#v0=x_1"))
            (rule "variableDeclarationAssign" (formula "8") (term "1"))
            (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_8"))
            (rule "assignment" (formula "8") (term "1"))
            (rule "sequentialToParallel2" (formula "8"))
            (rule "simplifyUpdate3" (formula "8") (term "1,0"))
            (rule "applyOnElementary" (formula "8") (term "1,0"))
            (rule "applyOnPV" (formula "8") (term "0,1,0"))
            (rule "variableDeclarationAssign" (formula "8") (term "1"))
            (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_9"))
            (rule "remove_parentheses_right" (formula "8") (term "1"))
            (rule "assignmentShiftLeftInt" (formula "8") (term "1"))
            (rule "translateJavaShiftLeftInt" (formula "8") (term "0,0,1"))
            (rule "sequentialToParallel2" (formula "8"))
            (rule "simplifyUpdate2" (formula "8"))
            (rule "simplifyUpdate3" (formula "8") (term "1,0"))
            (rule "applyOnElementary" (formula "8") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "8") (term "0,0,1,0"))
            (rule "javaShiftLeftIntDef" (formula "8") (term "0,1,0"))
            (rule "mod_axiom" (formula "8") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,1,0"))
            (rule "div_literals" (formula "8") (term "0,1,1,0,0,1,0"))
            (rule "times_zero_2" (formula "8") (term "1,1,0,0,1,0"))
            (rule "add_zero_right" (formula "8") (term "1,0,0,1,0"))
            (rule "shiftLeftDef" (formula "8") (term "0,0,1,0"))
            (rule "pow_literals" (formula "8") (term "1,2,0,0,1,0"))
            (rule "neg_literal" (formula "8") (term "1,1,0,0,1,0"))
            (rule "less_literals" (formula "8") (term "0,0,0,1,0"))
            (rule "ifthenelse_false" (formula "8") (term "0,0,1,0"))
            (rule "assignmentAdditionInt" (formula "8") (term "1"))
            (rule "translateJavaAddInt" (formula "8") (term "0,0,1"))
            (rule "sequentialToParallel2" (formula "8"))
            (rule "simplifyUpdate2" (formula "8"))
            (rule "simplifyUpdate3" (formula "8") (term "1,0"))
            (rule "applyOnElementary" (formula "8") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "8") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "8") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "8") (term "0,0,1,0"))
             (builtin "Use Operation Contract" (formula "8") (newnames "heapBefore_highestOneBit,result_0,exc_0,heapAfter_highestOneBit,anon_heap_highestOneBit") (contract "java.lang.Integer[java.lang.Integer::highestOneBit(int)].JML behavior operation contract.0"))
            (branch "Post (highestOneBit)"
               (rule "simplifyUpdate2" (formula "10"))
               (rule "simplifyUpdate2" (formula "9"))
               (rule "simplifyUpdate2" (formula "9"))
               (rule "simplifyUpdate2" (formula "9") (term "1"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "typeEqDerived" (formula "12") (term "0,0,1") (ifseqformula "10"))
               (rule "typeEqDerived" (formula "12") (term "0,1,1") (ifseqformula "10"))
               (rule "boolean_equal" (formula "12") (term "0,1"))
               (rule "boolean_equal" (formula "12") (term "1,1"))
               (rule "concrete_or_1" (formula "12") (term "1"))
               (rule "concrete_impl_4" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "sequentialToParallel2" (formula "12"))
               (rule "simplifyUpdate3" (formula "12") (term "1,0"))
               (rule "assignment" (formula "12") (term "1"))
               (rule "sequentialToParallel2" (formula "12"))
               (rule "simplifyUpdate3" (formula "12") (term "1,0"))
               (rule "blockEmpty" (formula "12") (term "1"))
               (rule "methodCallReturn" (formula "12") (term "1"))
               (rule "assignment" (formula "12") (term "1"))
               (rule "sequentialToParallel2" (formula "12"))
               (rule "simplifyUpdate2" (formula "12"))
               (rule "simplifyUpdate3" (formula "12") (term "1,0"))
               (rule "applyOnElementary" (formula "12") (term "1,0"))
               (rule "applyOnPV" (formula "12") (term "0,1,0"))
               (rule "methodCallEmpty" (formula "12") (term "1"))
               (rule "tryEmpty" (formula "12") (term "1"))
               (rule "emptyModality" (formula "12") (term "1"))
               (rule "applyOnRigidFormula" (formula "12"))
               (rule "simplifyUpdate2" (formula "12") (term "1"))
               (rule "simplifyUpdate2" (formula "12") (term "0"))
               (rule "applyOnRigidFormula" (formula "12") (term "1"))
               (rule "applyOnRigidFormula" (formula "12") (term "0"))
               (rule "simplifyUpdate2" (formula "12") (term "1,0"))
               (rule "simplifyUpdate2" (formula "12") (term "0,0"))
               (rule "applyOnRigidFormula" (formula "12") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "12") (term "1,0"))
               (rule "simplifyUpdate1" (formula "12") (term "1,1,0"))
               (rule "applyOnPV" (formula "12") (term "0,1,0"))
               (rule "eqClose" (formula "12") (term "1,0"))
               (rule "concrete_and_3" (formula "12") (term "0"))
               (rule "applyOnRigidFormula" (formula "12") (term "0,0,1"))
               (rule "simplifyUpdate1" (formula "12") (term "1,0,0,1"))
               (rule "simplifyUpdate1" (formula "12") (term "0,0,0,1"))
               (rule "applyOnRigidFormula" (formula "12") (term "0"))
               (rule "simplifyUpdate2" (formula "12") (term "1,0"))
               (rule "simplifyUpdate2" (formula "12") (term "0,0"))
               (rule "applyOnRigidTerm" (formula "12") (term "1,0,0,1"))
               (rule "simplifyUpdate1" (formula "12") (term "2,1,0,0,1"))
               (rule "simplifyUpdate1" (formula "12") (term "1,1,0,0,1"))
               (rule "applyOnPV" (formula "12") (term "0,1,0,0,1"))
               (rule "applyOnRigidTerm" (formula "12") (term "0,0,0,1"))
               (rule "simplifyUpdate1" (formula "12") (term "2,0,0,0,1"))
               (rule "simplifyUpdate1" (formula "12") (term "1,0,0,0,1"))
               (rule "applyOnPV" (formula "12") (term "0,0,0,0,1"))
               (rule "eqSymm" (formula "12") (term "0,0,1"))
               (rule "applyOnRigidFormula" (formula "12") (term "1,0"))
               (rule "applyOnPV" (formula "12") (term "0,1,0"))
               (rule "applyOnRigidFormula" (formula "12") (term "0,0"))
               (rule "applyOnPV" (formula "12") (term "0,0,0"))
               (rule "simplifyUpdate1" (formula "12") (term "1,0,0"))
               (rule "Static_class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "7"))
               (rule "notLeft" (formula "7"))
               (rule "Static_class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "12") (term "1,0"))
               (rule "pullOutSelect" (formula "12") (term "0,0,1,0") (inst "selectSK=java_util_VerifiedIdentityHashMap_NULL_KEY_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
               (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0,0"))
               (rule "eqClose" (formula "1") (term "0,0,1,0,0"))
               (rule "concrete_not_1" (formula "1") (term "0,1,0,0"))
               (rule "concrete_and_2" (formula "1") (term "1,0,0"))
               (rule "concrete_or_4" (formula "1") (term "0,0"))
               (rule "elementOfSetMinus" (formula "1") (term "0,0"))
               (rule "elementOfAllLocs" (formula "1") (term "0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0"))
               (rule "elementOfFreshLocs" (formula "1") (term "0,0,0"))
               (rule "eqClose" (formula "1") (term "0,0,0,0,0"))
               (rule "concrete_not_1" (formula "1") (term "0,0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0,0"))
               (rule "concrete_not_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_true" (formula "1") (term "0"))
               (rule "applyEqReverse" (formula "13") (term "0,0,1,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "commute_and" (formula "12") (term "0"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0,0,0,0") (ifseqformula "7"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0") (ifseqformula "4"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "13"))
               (rule "concrete_or_2" (formula "1"))
               (rule "cut_direct" (formula "2") (term "0"))
               (branch "CUT: java.util.VerifiedIdentityHashMap.NULL_KEY@anon_heap_highestOneBit<<anonHeapFunction>> = null TRUE"
                  (rule "concrete_or_1" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "replace_known_left" (formula "14") (term "0,0,0") (ifseqformula "2"))
                  (rule "concrete_not_1" (formula "14") (term "0,0"))
                  (rule "concrete_and_2" (formula "14") (term "0"))
                  (rule "concrete_and_2" (formula "14"))
                  (rule "false_right" (formula "14"))
                  (rule "expand_inInt" (formula "12"))
                  (rule "expand_inInt" (formula "6"))
                  (rule "replace_int_MAX" (formula "12") (term "1,0"))
                  (rule "replace_int_MIN" (formula "12") (term "0,1"))
                  (rule "replace_int_MAX" (formula "6") (term "1,0"))
                  (rule "replace_int_MIN" (formula "6") (term "0,1"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "6"))
                  (rule "inEqSimp_commuteLeq" (formula "14"))
                  (rule "inEqSimp_commuteLeq" (formula "7"))
                  (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                  (rule "leq_literals" (formula "7") (term "0"))
                  (rule "concrete_or_1" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "expand_mulJint" (formula "3") (term "0,0"))
                  (rule "mul_literals" (formula "3") (term "0,0,0"))
                  (rule "expand_divJint" (formula "4") (term "0"))
                  (rule "jdiv_axiom_inline" (formula "4") (term "0,0"))
                  (rule "qeq_literals" (formula "4") (term "0,0,0"))
                  (rule "ifthenelse_true" (formula "4") (term "0,0"))
                  (rule "div_literals" (formula "4") (term "0,0"))
                  (rule "expand_divJint" (formula "3") (term "0"))
                  (rule "expand_moduloInteger" (formula "4") (term "0"))
                  (rule "replace_int_RANGE" (formula "4") (term "1,1,0"))
                  (rule "replace_int_HALFRANGE" (formula "4") (term "0,0,1,0"))
                  (rule "replace_int_MIN" (formula "4") (term "0,0"))
                  (rule "add_literals" (formula "4") (term "0,1,0"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0"))
                  (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                  (rule "mod_axiom" (formula "4") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                  (rule "div_literals" (formula "4") (term "0,1,0,1,0"))
                  (rule "mul_literals" (formula "4") (term "1,0,1,0"))
                  (rule "add_zero_right" (formula "4") (term "0,1,0"))
                  (rule "mul_literals" (formula "4") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                  (rule "mul_literals" (formula "4") (term "1"))
                  (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "4"))
                  (rule "leq_literals" (formula "6") (term "0"))
                  (rule "concrete_or_1" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "7"))
                  (rule "qeq_literals" (formula "4") (term "0"))
                  (rule "concrete_and_2" (formula "4"))
                  (rule "closeFalse" (formula "4"))
               )
               (branch "CUT: java.util.VerifiedIdentityHashMap.NULL_KEY@anon_heap_highestOneBit<<anonHeapFunction>> = null FALSE"
                  (rule "concrete_or_2" (formula "2"))
                  (rule "replace_known_right" (formula "15") (term "0,0,0") (ifseqformula "13"))
                  (rule "concrete_not_2" (formula "15") (term "0,0"))
                  (rule "concrete_and_1" (formula "15") (term "0"))
                  (rule "cut_direct" (formula "15") (term "0"))
                  (branch "CUT: result_0 = 536870912 TRUE"
                     (rule "concrete_and_1" (formula "16"))
                     (rule "allRight" (formula "16") (inst "sk=f_0"))
                     (rule "allRight" (formula "16") (inst "sk=o_0"))
                     (rule "applyEq" (formula "13") (term "0") (ifseqformula "1"))
                     (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=f_0_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
                     (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                     (rule "eqSymm" (formula "17"))
                     (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
                     (rule "elementOfAllLocs" (formula "1") (term "0,0,0,0,0"))
                     (rule "concrete_and_1" (formula "1") (term "0,0,0,0"))
                     (rule "elementOfFreshLocs" (formula "1") (term "0,0,0,0,0"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch " !(!o_0 = null & !o_0.<created> = TRUE) & !f_0 = java.lang.Object::<created> | !o_0 = null & !o_0.<created> = TRUE TRUE"
                        (rule "applyEqReverse" (formula "18") (term "1") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "eqSymm" (formula "17"))
                        (rule "orLeft" (formula "1"))
                        (branch " !(!o_0 = null & !o_0.<created> = TRUE) & !f_0 = java.lang.Object::<created>"
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "cut_direct" (formula "15") (term "0,0"))
                           (branch "CUT: o_0 = null TRUE"
                              (rule "concrete_not_1" (formula "16") (term "0"))
                              (rule "concrete_and_2" (formula "16"))
                              (rule "false_right" (formula "16"))
                              (rule "applyEqRigid" (formula "18") (term "1,0") (ifseqformula "1"))
                              (rule "applyEqRigid" (formula "18") (term "1,1") (ifseqformula "1"))
                              (rule "expand_inInt" (formula "14"))
                              (rule "expand_inInt" (formula "8"))
                              (rule "replace_int_MIN" (formula "14") (term "0,1"))
                              (rule "replace_int_MAX" (formula "14") (term "1,0"))
                              (rule "replace_int_MAX" (formula "8") (term "1,0"))
                              (rule "replace_int_MIN" (formula "8") (term "0,1"))
                              (rule "leq_literals" (formula "14") (term "1"))
                              (rule "concrete_and_3" (formula "14"))
                              (rule "leq_literals" (formula "14"))
                              (rule "true_left" (formula "14"))
                              (rule "andLeft" (formula "8"))
                              (rule "inEqSimp_commuteLeq" (formula "9"))
                              (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                              (rule "leq_literals" (formula "9") (term "0"))
                              (rule "concrete_or_1" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "expand_divJint" (formula "5") (term "0"))
                              (rule "expand_divJint" (formula "6") (term "0"))
                              (rule "jdiv_axiom_inline" (formula "6") (term "0,0"))
                              (rule "div_literals" (formula "6") (term "1,0,0"))
                              (rule "qeq_literals" (formula "6") (term "0,0,0"))
                              (rule "ifthenelse_true" (formula "6") (term "0,0"))
                              (rule "expand_moduloInteger" (formula "5") (term "0"))
                              (rule "replace_int_RANGE" (formula "5") (term "1,1,0"))
                              (rule "replace_int_HALFRANGE" (formula "5") (term "0,0,1,0"))
                              (rule "replace_int_MIN" (formula "5") (term "0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "5"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                              (rule "mul_literals" (formula "5") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "5") (term "0"))
                              (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                              (rule "add_literals" (formula "5") (term "0,0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                              (rule "polySimp_elimOne" (formula "5") (term "0"))
                              (rule "expand_moduloInteger" (formula "6") (term "0"))
                              (rule "replace_int_MIN" (formula "6") (term "0,0"))
                              (rule "replace_int_RANGE" (formula "6") (term "1,1,0"))
                              (rule "replace_int_HALFRANGE" (formula "6") (term "0,0,1,0"))
                              (rule "add_literals" (formula "6") (term "0,1,0"))
                              (rule "inEqSimp_homoInEq1" (formula "6"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "6") (term "0"))
                              (rule "polySimp_addComm0" (formula "6") (term "0,0"))
                              (rule "mod_axiom" (formula "6") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0"))
                              (rule "div_literals" (formula "6") (term "0,1,0,1,0"))
                              (rule "times_zero_2" (formula "6") (term "1,0,1,0"))
                              (rule "add_zero_right" (formula "6") (term "0,1,0"))
                              (rule "mul_literals" (formula "6") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "6") (term "0"))
                              (rule "add_literals" (formula "6") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                              (rule "mul_literals" (formula "6") (term "1"))
                              (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "6"))
                              (rule "leq_literals" (formula "8") (term "0"))
                              (rule "concrete_or_1" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "9"))
                              (rule "qeq_literals" (formula "6") (term "0"))
                              (rule "concrete_and_2" (formula "6"))
                              (rule "closeFalse" (formula "6"))
                           )
                           (branch "CUT: o_0 = null FALSE"
                              (rule "concrete_not_2" (formula "16") (term "0"))
                              (rule "concrete_and_1" (formula "16"))
                              (rule "notRight" (formula "16"))
                              (rule "expand_inInt" (formula "8"))
                              (rule "expand_inInt" (formula "14"))
                              (rule "replace_int_MAX" (formula "8") (term "1,0"))
                              (rule "replace_int_MIN" (formula "8") (term "0,1"))
                              (rule "replace_int_MIN" (formula "14") (term "0,1"))
                              (rule "replace_int_MAX" (formula "14") (term "1,0"))
                              (rule "leq_literals" (formula "14") (term "1"))
                              (rule "concrete_and_3" (formula "14"))
                              (rule "leq_literals" (formula "14"))
                              (rule "true_left" (formula "14"))
                              (rule "andLeft" (formula "8"))
                              (rule "inEqSimp_commuteLeq" (formula "9"))
                              (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                              (rule "leq_literals" (formula "9") (term "0"))
                              (rule "concrete_or_1" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "expand_mulJint" (formula "5") (term "0,0"))
                              (rule "mul_literals" (formula "5") (term "0,0,0"))
                              (rule "expand_divJint" (formula "6") (term "0"))
                              (rule "jdiv_axiom_inline" (formula "6") (term "0,0"))
                              (rule "qeq_literals" (formula "6") (term "0,0,0"))
                              (rule "ifthenelse_true" (formula "6") (term "0,0"))
                              (rule "div_literals" (formula "6") (term "0,0"))
                              (rule "expand_moduloInteger" (formula "5") (term "0,0"))
                              (rule "replace_int_RANGE" (formula "5") (term "1,1,0,0"))
                              (rule "replace_int_HALFRANGE" (formula "5") (term "0,0,1,0,0"))
                              (rule "replace_int_MIN" (formula "5") (term "0,0,0"))
                              (rule "add_literals" (formula "5") (term "0,1,0,0"))
                              (rule "mod_axiom" (formula "5") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                              (rule "div_literals" (formula "5") (term "0,1,1,0,0"))
                              (rule "times_zero_2" (formula "5") (term "1,1,0,0"))
                              (rule "add_zero_right" (formula "5") (term "1,0,0"))
                              (rule "add_literals" (formula "5") (term "0,0"))
                              (rule "expand_moduloInteger" (formula "6") (term "0"))
                              (rule "replace_int_RANGE" (formula "6") (term "1,1,0"))
                              (rule "replace_int_HALFRANGE" (formula "6") (term "0,0,1,0"))
                              (rule "replace_int_MIN" (formula "6") (term "0,0"))
                              (rule "add_literals" (formula "6") (term "0,1,0"))
                              (rule "inEqSimp_homoInEq1" (formula "6"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "6") (term "0"))
                              (rule "polySimp_addComm0" (formula "6") (term "0,0"))
                              (rule "mod_axiom" (formula "6") (term "0,1,0"))
                              (rule "div_literals" (formula "6") (term "0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0"))
                              (rule "times_zero_2" (formula "6") (term "1,0,1,0"))
                              (rule "add_zero_right" (formula "6") (term "0,1,0"))
                              (rule "mul_literals" (formula "6") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "6") (term "0"))
                              (rule "add_literals" (formula "6") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                              (rule "mul_literals" (formula "6") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "6"))
                              (rule "qeq_literals" (formula "10") (term "0"))
                              (rule "concrete_and_2" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                        )
                        (branch "!o_0 = null & !o_0.<created> = TRUE"
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "expand_inInt" (formula "13"))
                           (rule "expand_inInt" (formula "7"))
                           (rule "replace_int_MIN" (formula "13") (term "0,1"))
                           (rule "replace_int_MAX" (formula "13") (term "1,0"))
                           (rule "replace_int_MIN" (formula "7") (term "0,1"))
                           (rule "replace_int_MAX" (formula "7") (term "1,0"))
                           (rule "leq_literals" (formula "13") (term "1"))
                           (rule "concrete_and_3" (formula "13"))
                           (rule "leq_literals" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "andLeft" (formula "7"))
                           (rule "inEqSimp_commuteLeq" (formula "8"))
                           (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                           (rule "leq_literals" (formula "8") (term "0"))
                           (rule "concrete_or_1" (formula "8"))
                           (rule "true_left" (formula "8"))
                           (rule "expand_divJint" (formula "5") (term "0"))
                           (rule "jdiv_axiom_inline" (formula "5") (term "0,0"))
                           (rule "mul_literals" (formula "5") (term "0,0,2,0,0"))
                           (rule "div_literals" (formula "5") (term "1,0,0"))
                           (rule "qeq_literals" (formula "5") (term "0,0,0"))
                           (rule "ifthenelse_true" (formula "5") (term "0,0"))
                           (rule "expand_divJint" (formula "4") (term "0"))
                           (rule "expand_moduloInteger" (formula "5") (term "0"))
                           (rule "replace_int_MIN" (formula "5") (term "0,0"))
                           (rule "replace_int_RANGE" (formula "5") (term "1,1,0"))
                           (rule "replace_int_HALFRANGE" (formula "5") (term "0,0,1,0"))
                           (rule "add_literals" (formula "5") (term "0,1,0"))
                           (rule "inEqSimp_homoInEq1" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "5") (term "0"))
                           (rule "polySimp_addComm0" (formula "5") (term "0,0"))
                           (rule "mod_axiom" (formula "5") (term "0,1,0"))
                           (rule "div_literals" (formula "5") (term "0,0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0"))
                           (rule "mul_literals" (formula "5") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "5") (term "0,1,0"))
                           (rule "mul_literals" (formula "5") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0"))
                           (rule "add_literals" (formula "5") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                           (rule "mul_literals" (formula "5") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "5"))
                           (rule "qeq_literals" (formula "9") (term "0"))
                           (rule "concrete_and_2" (formula "9"))
                           (rule "closeFalse" (formula "9"))
                        )
                     )
                     (branch " !(!o_0 = null & !o_0.<created> = TRUE) & !f_0 = java.lang.Object::<created> | !o_0 = null & !o_0.<created> = TRUE FALSE"
                        (rule "close" (formula "18") (ifseqformula "1"))
                     )
                  )
                  (branch "CUT: result_0 = 536870912 FALSE"
                     (rule "concrete_and_2" (formula "16"))
                     (rule "false_right" (formula "16"))
                     (rule "expand_inInt" (formula "6"))
                     (rule "expand_inInt" (formula "12"))
                     (rule "replace_int_MIN" (formula "6") (term "0,1"))
                     (rule "replace_int_MAX" (formula "6") (term "1,0"))
                     (rule "replace_int_MIN" (formula "12") (term "0,1"))
                     (rule "replace_int_MAX" (formula "12") (term "1,0"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "13"))
                     (rule "inEqSimp_commuteLeq" (formula "7"))
                     (rule "inEqSimp_commuteLeq" (formula "14"))
                     (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                     (rule "leq_literals" (formula "7") (term "0"))
                     (rule "concrete_or_1" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "expand_mulJint" (formula "3") (term "0,0"))
                     (rule "mul_literals" (formula "3") (term "0,0,0"))
                     (rule "expand_divJint" (formula "4") (term "0"))
                     (rule "jdiv_axiom_inline" (formula "4") (term "0,0"))
                     (rule "qeq_literals" (formula "4") (term "0,0,0"))
                     (rule "ifthenelse_true" (formula "4") (term "0,0"))
                     (rule "div_literals" (formula "4") (term "0,0"))
                     (rule "expand_divJint" (formula "3") (term "0"))
                     (rule "expand_moduloInteger" (formula "4") (term "0"))
                     (rule "replace_int_HALFRANGE" (formula "4") (term "0,0,1,0"))
                     (rule "replace_int_MIN" (formula "4") (term "0,0"))
                     (rule "replace_int_RANGE" (formula "4") (term "1,1,0"))
                     (rule "add_literals" (formula "4") (term "0,1,0"))
                     (rule "inEqSimp_homoInEq1" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                     (rule "mul_literals" (formula "4") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0"))
                     (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                     (rule "mod_axiom" (formula "4") (term "0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                     (rule "div_literals" (formula "4") (term "0,1,0,1,0"))
                     (rule "mul_literals" (formula "4") (term "1,0,1,0"))
                     (rule "add_literals" (formula "4") (term "0,1,0"))
                     (rule "mul_literals" (formula "4") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "add_literals" (formula "4") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                     (rule "mul_literals" (formula "4") (term "1"))
                     (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "4"))
                     (rule "leq_literals" (formula "6") (term "0"))
                     (rule "concrete_or_1" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "7") (term "0"))
                     (rule "concrete_and_2" (formula "7"))
                     (rule "closeFalse" (formula "7"))
                  )
               )
            )
            (branch "Exceptional Post (highestOneBit)"
               (rule "simplifyUpdate2" (formula "9"))
               (rule "simplifyUpdate2" (formula "10"))
               (rule "simplifyUpdate2" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "10"))
               (rule "simplifyUpdate2" (formula "11"))
               (rule "andLeft" (formula "10"))
               (rule "simplifyUpdate2" (formula "10"))
               (rule "notLeft" (formula "10"))
               (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "12"))
               (rule "concrete_not_2" (formula "11") (term "0"))
               (rule "concrete_impl_1" (formula "11"))
               (rule "sequentialToParallel2" (formula "13"))
               (rule "simplifyUpdate3" (formula "13") (term "1,0"))
               (rule "applyOnRigidFormula" (formula "10"))
               (rule "simplifyUpdate1" (formula "10") (term "1"))
               (rule "applyOnRigidTerm" (formula "10") (term "0"))
               (rule "applyOnPV" (formula "10") (term "0,0"))
               (rule "simplifyUpdate1" (formula "10") (term "2,0"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "10") (ifseqformula "9"))
               (rule "simplifyUpdate1" (formula "10") (term "1,0,0"))
               (rule "simplifyUpdate1" (formula "10") (term "1,0,1"))
               (rule "blockThrow" (formula "13") (term "1"))
               (rule "methodCallParamThrow" (formula "13") (term "1"))
               (rule "tryCatchThrow" (formula "13") (term "1"))
               (rule "ifElseUnfold" (formula "13") (term "1") (inst "#boolv=x"))
               (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_10"))
               (rule "equality_comparison_simple" (formula "13") (term "1"))
               (rule "sequentialToParallel2" (formula "13"))
               (rule "simplifyUpdate3" (formula "13") (term "1,0"))
               (rule "replace_known_right" (formula "13") (term "0,0,1,0") (ifseqformula "12"))
               (rule "ifthenelse_false" (formula "13") (term "0,1,0"))
               (rule "ifElseSplit" (formula "13"))
               (branch "if x_10 true"
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "14"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if x_10 false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "14"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "12"))
                  (rule "simplifyUpdate1" (formula "12") (term "1"))
                  (rule "applyOnPV" (formula "12") (term "0"))
                  (rule "boolean_not_equal_2" (formula "12"))
                  (rule "false_right" (formula "12"))
                  (rule "elim_double_block" (formula "13") (term "1"))
                  (rule "ifElseSplit" (formula "13"))
                  (branch "if exc_0 instanceof java.lang.Throwable true"
                     (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                     (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                     (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                     (rule "concrete_or_4" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "variableDeclaration" (formula "13") (term "1") (newnames "e"))
                     (rule "delete_unnecessary_cast" (formula "13") (term "1"))
                     (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                     (rule "boolean_equal" (formula "1") (term "1,1"))
                     (rule "concrete_or_3" (formula "1") (term "1"))
                     (rule "true_left" (formula "1"))
                     (rule "sequentialToParallel2" (formula "13"))
                     (rule "simplifyUpdate3" (formula "13") (term "1,0"))
                     (rule "assignment" (formula "13") (term "1"))
                     (rule "sequentialToParallel2" (formula "13"))
                     (rule "simplifyUpdate2" (formula "13"))
                     (rule "simplifyUpdate3" (formula "13") (term "1,0"))
                     (rule "applyOnElementary" (formula "13") (term "1,0"))
                     (rule "applyOnPV" (formula "13") (term "0,1,0"))
                     (rule "emptyModality" (formula "13") (term "1"))
                     (rule "applyOnRigidFormula" (formula "13"))
                     (rule "simplifyUpdate2" (formula "13") (term "1"))
                     (rule "simplifyUpdate2" (formula "13") (term "0"))
                     (rule "applyOnRigidFormula" (formula "13") (term "1"))
                     (rule "applyOnRigidFormula" (formula "13") (term "0"))
                     (rule "simplifyUpdate2" (formula "13") (term "1,0"))
                     (rule "simplifyUpdate2" (formula "13") (term "0,0"))
                     (rule "applyOnRigidFormula" (formula "13") (term "0,1"))
                     (rule "applyOnRigidFormula" (formula "13") (term "1,0"))
                     (rule "simplifyUpdate1" (formula "13") (term "1,1,0"))
                     (rule "applyOnPV" (formula "13") (term "0,1,0"))
                     (rule "replace_known_right" (formula "13") (term "1,0") (ifseqformula "12"))
                     (rule "concrete_and_4" (formula "13") (term "0"))
                     (rule "concrete_and_2" (formula "13"))
                     (rule "false_right" (formula "13"))
                     (rule "Static_class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "7"))
                     (rule "notLeft" (formula "7"))
                     (rule "cut_direct" (formula "10") (term "1"))
                     (branch "CUT: java.lang.RuntimeException::instance(exc_0) = TRUE TRUE"
                        (rule "instanceof_not_compatible_5" (formula "11") (term "0") (ifseqformula "10"))
                        (rule "concrete_or_3" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "cut_direct" (formula "9") (term "0"))
                        (branch "CUT: exc_0.<created> = TRUE TRUE"
                           (rule "concrete_or_1" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "0") (ifseqformula "3"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "12"))
                           (rule "concrete_or_2" (formula "1"))
                           (rule "expand_inInt" (formula "5"))
                           (rule "replace_int_MAX" (formula "5") (term "1,0"))
                           (rule "replace_int_MIN" (formula "5") (term "0,1"))
                           (rule "andLeft" (formula "5"))
                           (rule "inEqSimp_commuteLeq" (formula "6"))
                           (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "8"))
                           (rule "leq_literals" (formula "6") (term "0"))
                           (rule "concrete_or_1" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "expand_mulJint" (formula "2") (term "0,0"))
                           (rule "mul_literals" (formula "2") (term "0,0,0"))
                           (rule "expand_divJint" (formula "3") (term "0"))
                           (rule "jdiv_axiom_inline" (formula "3") (term "0,0"))
                           (rule "mul_literals" (formula "3") (term "0,0,2,0,0"))
                           (rule "div_literals" (formula "3") (term "1,0,0"))
                           (rule "qeq_literals" (formula "3") (term "0,0,0"))
                           (rule "ifthenelse_true" (formula "3") (term "0,0"))
                           (rule "expand_divJint" (formula "2") (term "0"))
                           (rule "expand_moduloInteger" (formula "3") (term "0"))
                           (rule "replace_int_RANGE" (formula "3") (term "1,1,0"))
                           (rule "replace_int_HALFRANGE" (formula "3") (term "0,0,1,0"))
                           (rule "replace_int_MIN" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "0,1,0"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0"))
                           (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                           (rule "mod_axiom" (formula "3") (term "0,1,0"))
                           (rule "div_literals" (formula "3") (term "0,0,1,0,1,0"))
                           (rule "times_zero_2" (formula "3") (term "0,1,0,1,0"))
                           (rule "times_zero_2" (formula "3") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "3") (term "0,1,0"))
                           (rule "mul_literals" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "add_literals" (formula "3") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "7") (term "0"))
                           (rule "concrete_and_2" (formula "7"))
                           (rule "closeFalse" (formula "7"))
                        )
                        (branch "CUT: exc_0.<created> = TRUE FALSE"
                           (rule "concrete_or_2" (formula "9"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0") (ifseqformula "3"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "13"))
                           (rule "concrete_or_2" (formula "1"))
                           (rule "expand_inInt" (formula "5"))
                           (rule "replace_int_MAX" (formula "5") (term "1,0"))
                           (rule "replace_int_MIN" (formula "5") (term "0,1"))
                           (rule "andLeft" (formula "5"))
                           (rule "inEqSimp_commuteLeq" (formula "6"))
                           (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "8"))
                           (rule "leq_literals" (formula "6") (term "0"))
                           (rule "concrete_or_1" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "expand_divJint" (formula "3") (term "0"))
                           (rule "jdiv_axiom_inline" (formula "3") (term "0,0"))
                           (rule "qeq_literals" (formula "3") (term "0,0,0"))
                           (rule "ifthenelse_true" (formula "3") (term "0,0"))
                           (rule "div_literals" (formula "3") (term "0,0"))
                           (rule "expand_divJint" (formula "2") (term "0"))
                           (rule "expand_moduloInteger" (formula "3") (term "0"))
                           (rule "replace_int_HALFRANGE" (formula "3") (term "0,0,1,0"))
                           (rule "replace_int_MIN" (formula "3") (term "0,0"))
                           (rule "replace_int_RANGE" (formula "3") (term "1,1,0"))
                           (rule "add_literals" (formula "3") (term "0,1,0"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0"))
                           (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                           (rule "mod_axiom" (formula "3") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                           (rule "div_literals" (formula "3") (term "0,1,0,1,0"))
                           (rule "times_zero_2" (formula "3") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "3") (term "0,1,0"))
                           (rule "mul_literals" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "add_literals" (formula "3") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "7"))
                           (rule "qeq_literals" (formula "3") (term "0"))
                           (rule "concrete_and_2" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                     )
                     (branch "CUT: java.lang.RuntimeException::instance(exc_0) = TRUE FALSE"
                        (rule "concrete_or_4" (formula "10"))
                        (rule "instanceof_not_compatible_5" (formula "11") (ifseqformula "10"))
                        (rule "cut_direct" (formula "9") (term "0"))
                        (branch "CUT: exc_0.<created> = TRUE TRUE"
                           (rule "concrete_or_1" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "0") (ifseqformula "3"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "12"))
                           (rule "concrete_or_2" (formula "1"))
                           (rule "expand_inInt" (formula "5"))
                           (rule "replace_int_MAX" (formula "5") (term "1,0"))
                           (rule "replace_int_MIN" (formula "5") (term "0,1"))
                           (rule "andLeft" (formula "5"))
                           (rule "inEqSimp_commuteLeq" (formula "6"))
                           (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "8"))
                           (rule "leq_literals" (formula "6") (term "0"))
                           (rule "concrete_or_1" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "expand_mulJint" (formula "2") (term "0,0"))
                           (rule "mul_literals" (formula "2") (term "0,0,0"))
                           (rule "expand_divJint" (formula "3") (term "0"))
                           (rule "jdiv_axiom_inline" (formula "3") (term "0,0"))
                           (rule "mul_literals" (formula "3") (term "0,0,2,0,0"))
                           (rule "div_literals" (formula "3") (term "1,0,0"))
                           (rule "qeq_literals" (formula "3") (term "0,0,0"))
                           (rule "ifthenelse_true" (formula "3") (term "0,0"))
                           (rule "expand_divJint" (formula "2") (term "0"))
                           (rule "expand_moduloInteger" (formula "3") (term "0"))
                           (rule "replace_int_RANGE" (formula "3") (term "1,1,0"))
                           (rule "replace_int_HALFRANGE" (formula "3") (term "0,0,1,0"))
                           (rule "replace_int_MIN" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "0,1,0"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0"))
                           (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                           (rule "mod_axiom" (formula "3") (term "0,1,0"))
                           (rule "div_literals" (formula "3") (term "0,0,1,0,1,0"))
                           (rule "times_zero_2" (formula "3") (term "0,1,0,1,0"))
                           (rule "times_zero_2" (formula "3") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "3") (term "0,1,0"))
                           (rule "mul_literals" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "add_literals" (formula "3") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "7") (term "0"))
                           (rule "concrete_and_2" (formula "7"))
                           (rule "closeFalse" (formula "7"))
                        )
                        (branch "CUT: exc_0.<created> = TRUE FALSE"
                           (rule "concrete_or_2" (formula "9"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0") (ifseqformula "3"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "13"))
                           (rule "concrete_or_2" (formula "1"))
                           (rule "expand_inInt" (formula "5"))
                           (rule "replace_int_MAX" (formula "5") (term "1,0"))
                           (rule "replace_int_MIN" (formula "5") (term "0,1"))
                           (rule "andLeft" (formula "5"))
                           (rule "inEqSimp_commuteLeq" (formula "6"))
                           (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "8"))
                           (rule "leq_literals" (formula "6") (term "0"))
                           (rule "concrete_or_1" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "expand_divJint" (formula "3") (term "0"))
                           (rule "jdiv_axiom_inline" (formula "3") (term "0,0"))
                           (rule "qeq_literals" (formula "3") (term "0,0,0"))
                           (rule "ifthenelse_true" (formula "3") (term "0,0"))
                           (rule "div_literals" (formula "3") (term "0,0"))
                           (rule "expand_divJint" (formula "2") (term "0"))
                           (rule "expand_moduloInteger" (formula "3") (term "0"))
                           (rule "replace_int_HALFRANGE" (formula "3") (term "0,0,1,0"))
                           (rule "replace_int_MIN" (formula "3") (term "0,0"))
                           (rule "replace_int_RANGE" (formula "3") (term "1,1,0"))
                           (rule "add_literals" (formula "3") (term "0,1,0"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0"))
                           (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                           (rule "mod_axiom" (formula "3") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                           (rule "div_literals" (formula "3") (term "0,1,0,1,0"))
                           (rule "times_zero_2" (formula "3") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "3") (term "0,1,0"))
                           (rule "mul_literals" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "add_literals" (formula "3") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "7"))
                           (rule "qeq_literals" (formula "3") (term "0"))
                           (rule "concrete_and_2" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                     )
                  )
                  (branch "if exc_0 instanceof java.lang.Throwable false"
                     (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                     (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                     (rule "concrete_or_4" (formula "1") (term "0,1"))
                     (rule "double_not" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "typeEqDerived" (formula "12") (term "0,1") (ifseqformula "1"))
                     (rule "typeEqDerived" (formula "12") (term "0,0") (ifseqformula "1"))
                     (rule "close" (formula "13") (ifseqformula "1"))
                  )
               )
            )
            (branch "Pre (highestOneBit)"
               (rule "simplifyUpdate2" (formula "8"))
               (rule "simplifyUpdate2" (formula "8") (term "1"))
               (rule "applyOnRigidFormula" (formula "8"))
               (rule "simplifyUpdate2" (formula "8") (term "0"))
               (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "3"))
               (rule "concrete_and_1" (formula "8"))
               (rule "applyOnRigidFormula" (formula "8"))
               (rule "applyOnPV" (formula "8") (term "0"))
               (rule "Static_class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "7"))
               (rule "notLeft" (formula "7"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "0") (ifseqformula "3"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "8"))
               (rule "concrete_or_2" (formula "1"))
               (rule "expand_inInt" (formula "9"))
               (rule "expand_inInt" (formula "5"))
               (rule "replace_int_MIN" (formula "9") (term "0,1"))
               (rule "replace_int_MAX" (formula "9") (term "1,0"))
               (rule "replace_int_MAX" (formula "5") (term "1,0"))
               (rule "replace_int_MIN" (formula "5") (term "0,1"))
               (rule "andLeft" (formula "5"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "1"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "8"))
               (rule "leq_literals" (formula "6") (term "0"))
               (rule "concrete_or_1" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "expand_mulJint" (formula "2") (term "0,0"))
               (rule "mul_literals" (formula "2") (term "0,0,0"))
               (rule "expand_divJint" (formula "3") (term "0"))
               (rule "jdiv_axiom_inline" (formula "3") (term "0,0"))
               (rule "qeq_literals" (formula "3") (term "0,0,0"))
               (rule "ifthenelse_true" (formula "3") (term "0,0"))
               (rule "div_literals" (formula "3") (term "0,0"))
               (rule "expand_moduloInteger" (formula "9") (term "1,0,0"))
               (rule "replace_int_HALFRANGE" (formula "9") (term "0,0,1,1,0,0"))
               (rule "replace_int_MIN" (formula "9") (term "0,1,0,0"))
               (rule "replace_int_RANGE" (formula "9") (term "1,1,1,0,0"))
               (rule "mod_axiom" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "1,0,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0,1,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
               (rule "add_zero_left" (formula "9") (term "0,1,0,0"))
               (rule "expand_moduloInteger" (formula "9") (term "1,0,1"))
               (rule "replace_int_MIN" (formula "9") (term "0,1,0,1"))
               (rule "replace_int_HALFRANGE" (formula "9") (term "0,0,1,1,0,1"))
               (rule "replace_int_RANGE" (formula "9") (term "1,1,1,0,1"))
               (rule "mod_axiom" (formula "9") (term "1,1,0,1"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,1"))
               (rule "polySimp_addAssoc" (formula "9") (term "1,0,1"))
               (rule "polySimp_addAssoc" (formula "9") (term "0,1,0,1"))
               (rule "add_literals" (formula "9") (term "0,0,1,0,1"))
               (rule "add_zero_left" (formula "9") (term "0,1,0,1"))
               (rule "expand_divJint" (formula "2") (term "0"))
               (rule "expand_moduloInteger" (formula "3") (term "0"))
               (rule "replace_int_HALFRANGE" (formula "3") (term "0,0,1,0"))
               (rule "replace_int_RANGE" (formula "3") (term "1,1,0"))
               (rule "replace_int_MIN" (formula "3") (term "0,0"))
               (rule "add_literals" (formula "3") (term "0,1,0"))
               (rule "inEqSimp_homoInEq1" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
               (rule "polySimp_rightDist" (formula "3") (term "1,0"))
               (rule "mul_literals" (formula "3") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0"))
               (rule "polySimp_addComm0" (formula "3") (term "0,0"))
               (rule "mod_axiom" (formula "3") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
               (rule "div_literals" (formula "3") (term "0,1,0,1,0"))
               (rule "times_zero_2" (formula "3") (term "1,0,1,0"))
               (rule "add_zero_right" (formula "3") (term "0,1,0"))
               (rule "mul_literals" (formula "3") (term "1,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "add_literals" (formula "3") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3"))
               (rule "mul_literals" (formula "3") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "7"))
               (rule "qeq_literals" (formula "3") (term "0"))
               (rule "concrete_and_2" (formula "3"))
               (rule "closeFalse" (formula "3"))
            )
         )
      )
      (branch
         (rule "equal_literals" (formula "7") (term "0,1"))
         (rule "concrete_not_2" (formula "7") (term "1"))
         (rule "closeTrue" (formula "7"))
      )
   )
)
(branch
   (rule "equal_literals" (formula "6") (term "0,1"))
   (rule "concrete_not_2" (formula "6") (term "1"))
   (rule "closeTrue" (formula "6"))
)
)
}
