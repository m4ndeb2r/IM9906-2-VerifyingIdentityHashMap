\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Nov 11 18:25:39 CET 2021
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , javaLoopTreatment-javaLoopTreatment\\:efficient , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_EXTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_NONE
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\bootclasspath "../../../jre";

\javaSource "../../../src";

\include "../../../functions.key";

\proofObligation "#Proof Obligation Settings
#Thu Nov 11 18:25:39 CET 2021
contract=java.util.VerifiedIdentityHashMap[java.util.VerifiedIdentityHashMap\\:\\:resize(int)].JML normal_behavior operation contract.1
name=java.util.VerifiedIdentityHashMap[java.util.VerifiedIdentityHashMap\\:\\:resize(int)].JML normal_behavior operation contract.1
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "cdego" ) (keyVersion "40b2d39292"))

(autoModeTime "962")

(branch "dummy ID"
(rule "insert_constant_value" (formula "1") (term "1,1,1,0,1,0") (newnames "newCapacity,self,result,exc,heapAtPre,o,f"))
(rule "insert_constant_value" (formula "1") (term "1,1,0,0,1,0"))
(rule "ifthenelse_false" (formula "1") (term "1,0,0,0,0,1,1"))
(rule "false_to_not_true" (formula "1") (term "0,0,0,0,1,1"))
(rule "insert_constant_value" (formula "1") (term "1,1,0,0,0,0,1,0"))
(rule "expand_inInt" (formula "1") (term "1,0,0,0"))
(rule "mul_literals" (formula "1") (term "1,1,0,1,0"))
(rule "mul_literals" (formula "1") (term "1,0,0,0,0,1,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "13") (term "0,0,1,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1"))
(rule "inEqSimp_ltToLeq" (formula "7"))
(rule "mul_literals" (formula "7") (term "1,0,0"))
(rule "add_literals" (formula "7") (term "0,0"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "assignment" (formula "13") (term "1"))
(rule "sequentialToParallel2" (formula "13"))
(rule "simplifyUpdate3" (formula "13") (term "1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7"))
(rule "mul_literals" (formula "7") (term "1"))
(rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "10"))
(rule "leq_literals" (formula "4") (term "0"))
(rule "concrete_or_1" (formula "4"))
(rule "true_left" (formula "4"))
(rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "8"))
(rule "leq_literals" (formula "4") (term "0"))
(rule "concrete_or_1" (formula "4"))
(rule "true_left" (formula "4"))
(rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
(rule "polySimp_mulAssoc" (formula "6") (term "0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "0,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
(rule "polySimp_addComm0" (formula "6") (term "0"))
(rule "inEqSimp_sepNegMonomial1" (formula "6"))
(rule "polySimp_mulLiterals" (formula "6") (term "0"))
(rule "elimGcdLeq_antec" (formula "6") (inst "elimGcdRightDiv=Z(1(1(9(0(7(8(6(3(5(#))))))))))") (inst "elimGcdLeftDiv=newCapacity") (inst "elimGcd=Z(2(#))"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0,0,1,0"))
(rule "neg_literal" (formula "6") (term "0,0,0,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0"))
(rule "leq_literals" (formula "6") (term "0,0"))
(rule "concrete_or_2" (formula "6") (term "0"))
(rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
(rule "polySimp_addLiterals" (formula "6") (term "0,0,0,0"))
(rule "add_literals" (formula "6") (term "0,0,0,0"))
(rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
(rule "add_literals" (formula "6") (term "1,1,0,0"))
(rule "times_zero_1" (formula "6") (term "1,0,0"))
(rule "add_zero_right" (formula "6") (term "0,0"))
(rule "qeq_literals" (formula "6") (term "0"))
(rule "concrete_or_2" (formula "6"))
(rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "6"))
(rule "leq_literals" (formula "9") (term "0"))
(rule "concrete_or_1" (formula "9"))
(rule "true_left" (formula "9"))
(rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_resize,savedHeapBefore_resize,_newCapacityBefore_resize"))
(rule "simplifyUpdate2" (formula "11") (term "1"))
(rule "sequentialToParallel2" (formula "11"))
(rule "simplifyUpdate3" (formula "11") (term "1,0"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "newLength"))
(rule "assignmentMultiplicationInt" (formula "11") (term "1"))
(rule "translateJavaMulInt" (formula "11") (term "0,0,1"))
(rule "sequentialToParallel2" (formula "11"))
(rule "simplifyUpdate2" (formula "11"))
(rule "simplifyUpdate3" (formula "11") (term "1,0"))
(rule "applyOnElementary" (formula "11") (term "1,0"))
(rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "11") (term "1,0,1,0"))
(rule "applyOnPV" (formula "11") (term "0,0,1,0"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "oldTable"))
(rule "assignment_read_attribute_this" (formula "11"))
(rule "sequentialToParallel2" (formula "11"))
(rule "simplifyUpdate3" (formula "11") (term "1,0"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "oldLength"))
(rule "assignment_read_length" (formula "11"))
(branch "Normal Execution (oldTable != null)"
   (rule "sequentialToParallel2" (formula "11"))
   (rule "simplifyUpdate3" (formula "11") (term "1,0"))
   (rule "applyOnElementary" (formula "11") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
   (rule "applyOnPV" (formula "11") (term "0,0,1,0"))
   (rule "expand_mulJint" (formula "11") (term "0,1,0,0,0"))
   (rule "expand_moduloInteger" (formula "11") (term "0,1,0,0,0"))
   (rule "replace_int_RANGE" (formula "11") (term "1,1,0,1,0,0,0"))
   (rule "replace_int_HALFRANGE" (formula "11") (term "0,0,1,0,1,0,0,0"))
   (rule "replace_int_MIN" (formula "11") (term "0,0,1,0,0,0"))
   (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x"))
   (rule "compound_equality_comparison_2" (formula "11") (term "1") (inst "#v1=x_2") (inst "#v0=x_1"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_1"))
   (rule "assignment" (formula "11") (term "1"))
   (rule "sequentialToParallel2" (formula "11"))
   (rule "simplifyUpdate3" (formula "11") (term "1,0"))
   (rule "applyOnElementary" (formula "11") (term "1,0"))
   (rule "applyOnPV" (formula "11") (term "0,1,0"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_2"))
   (rule "assignmentMultiplicationInt" (formula "11") (term "1"))
   (rule "insert_constant_value" (formula "11") (term "1,0,0,1"))
   (rule "translateJavaMulInt" (formula "11") (term "0,0,1"))
   (rule "sequentialToParallel2" (formula "11"))
   (rule "simplifyUpdate3" (formula "11") (term "1,0"))
   (rule "expand_mulJint" (formula "11") (term "0,1,0"))
   (rule "mul_literals" (formula "11") (term "0,0,1,0"))
   (rule "expand_moduloInteger" (formula "11") (term "0,1,0"))
   (rule "replace_int_RANGE" (formula "11") (term "1,1,0,1,0"))
   (rule "replace_int_HALFRANGE" (formula "11") (term "0,0,1,0,1,0"))
   (rule "replace_int_MIN" (formula "11") (term "0,0,1,0"))
   (rule "add_literals" (formula "11") (term "0,1,0,1,0"))
   (rule "mod_axiom" (formula "11") (term "1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,1,0"))
   (rule "div_literals" (formula "11") (term "0,1,1,0,1,0"))
   (rule "times_zero_2" (formula "11") (term "1,1,0,1,0"))
   (rule "add_zero_right" (formula "11") (term "1,0,1,0"))
   (rule "add_literals" (formula "11") (term "0,1,0"))
   (rule "equality_comparison_simple" (formula "11") (term "1"))
   (rule "eqSymm" (formula "11") (term "0,0,0,1"))
   (rule "sequentialToParallel2" (formula "11"))
   (rule "simplifyUpdate2" (formula "11"))
   (rule "simplifyUpdate3" (formula "11") (term "1,0"))
   (rule "applyOnElementary" (formula "11") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "2,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "11") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,0,0,1,0"))
   (rule "applyOnPV" (formula "11") (term "0,0,0,1,0"))
   (rule "applyOnPV" (formula "11") (term "1,0,0,1,0"))
   (rule "eqSymm" (formula "11") (term "0,0,1,0"))
   (rule "inEqSimp_contradEq3" (formula "11") (term "0,0,1,0") (ifseqformula "5"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0,0,1,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,0,1,0"))
   (rule "qeq_literals" (formula "11") (term "0,0,0,1,0"))
   (rule "concrete_and_2" (formula "11") (term "0,0,1,0"))
   (rule "ifthenelse_false" (formula "11") (term "0,1,0"))
   (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
   (rule "expand_inInt" (formula "7"))
   (rule "replace_int_MIN" (formula "7") (term "0,1"))
   (rule "replace_int_MAX" (formula "7") (term "1,0"))
   (rule "andLeft" (formula "7"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "5"))
   (rule "leq_literals" (formula "7") (term "0"))
   (rule "concrete_or_1" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "arrayLengthNotNegative" (formula "8") (term "0"))
   (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "8"))
   (rule "leq_literals" (formula "7") (term "0"))
   (rule "concrete_or_1" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "ifSplit" (formula "12"))
   (branch "if x true"
      (rule "simplifyUpdate2" (formula "13"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "boolean_not_equal_2" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "if x false"
      (rule "false_to_not_true" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "13"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnRigidFormula" (formula "11"))
      (rule "simplifyUpdate1" (formula "11") (term "1"))
      (rule "applyOnPV" (formula "11") (term "0"))
      (rule "boolean_not_equal_2" (formula "11"))
      (rule "false_right" (formula "11"))
      (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_3"))
      (rule "greater_equal_than_comparison_simple" (formula "12") (term "1"))
      (rule "sequentialToParallel2" (formula "12"))
      (rule "simplifyUpdate3" (formula "12") (term "1,0"))
      (rule "applyOnElementary" (formula "12") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "12") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "12") (term "2,0,1,0"))
      (rule "simplifyUpdate1" (formula "12") (term "1,0,1,0"))
      (rule "applyOnRigidFormula" (formula "12") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "12") (term "1,0,0,1,0"))
      (rule "simplifyUpdate1" (formula "12") (term "0,0,0,1,0"))
      (rule "applyOnPV" (formula "12") (term "1,0,0,1,0"))
      (rule "applyOnPV" (formula "12") (term "0,0,0,1,0"))
      (rule "ifSplit" (formula "12"))
      (branch "if x_3 true"
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "13"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "ifthenelse_concrete3" (formula "1"))
         (rule "boolean_not_equal_2" (formula "1") (term "1"))
         (rule "concrete_or_4" (formula "1"))
         (rule "mod_axiom" (formula "1") (term "1,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
         (rule "add_literals" (formula "1") (term "0,0,1"))
         (rule "add_zero_left" (formula "1") (term "0,1"))
         (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "6"))
         (rule "polySimp_rightDist" (formula "1") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulAssoc" (formula "1") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "polySimp_addComm0" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "elimGcdGeq_antec" (formula "1") (inst "elimGcdRightDiv=add(Z(neglit(1(1(9(0(7(8(6(3(5(#))))))))))),
    newCapacity)") (inst "elimGcdLeftDiv=mul(div(add(Z(8(4(6(3(8(4(7(4(1(2(#))))))))))),
            mul(newCapacity, Z(2(#)))),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(8(4(6(3(8(4(7(4(1(2(#))))))))))))") (inst "elimGcd=Z(2(#))"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1,0"))
         (rule "leq_literals" (formula "1") (term "0,0"))
         (rule "concrete_or_2" (formula "1") (term "0"))
         (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0"))
         (rule "leq_literals" (formula "1") (term "0"))
         (rule "concrete_or_2" (formula "1"))
         (rule "methodCallReturn" (formula "14") (term "1"))
         (rule "simplifyUpdate2" (formula "14"))
         (rule "assignment" (formula "14") (term "1"))
         (rule "sequentialToParallel2" (formula "14"))
         (rule "simplifyUpdate3" (formula "14") (term "1,0"))
         (rule "methodCallEmpty" (formula "14") (term "1"))
         (rule "tryEmpty" (formula "14") (term "1"))
         (rule "emptyModality" (formula "14") (term "1"))
         (rule "applyOnRigidFormula" (formula "14"))
         (rule "simplifyUpdate2" (formula "14") (term "1"))
         (rule "simplifyUpdate2" (formula "14") (term "0"))
         (rule "applyOnRigidFormula" (formula "14") (term "1"))
         (rule "applyOnRigidFormula" (formula "14") (term "0"))
         (rule "simplifyUpdate2" (formula "14") (term "1,0"))
         (rule "simplifyUpdate2" (formula "14") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "14") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "14") (term "1,0"))
         (rule "simplifyUpdate1" (formula "14") (term "1,1,0"))
         (rule "applyOnPV" (formula "14") (term "0,1,0"))
         (rule "eqClose" (formula "14") (term "1,0"))
         (rule "concrete_and_3" (formula "14") (term "0"))
         (rule "applyOnRigidFormula" (formula "14") (term "0,0,1"))
         (rule "simplifyUpdate1" (formula "14") (term "1,0,0,1"))
         (rule "applyOnRigidFormula" (formula "14") (term "0"))
         (rule "simplifyUpdate2" (formula "14") (term "1,0"))
         (rule "replace_known_left" (formula "14") (term "1,0") (ifseqformula "12"))
         (rule "concrete_and_3" (formula "14") (term "0"))
         (rule "applyOnRigidTerm" (formula "14") (term "0,0,0,1"))
         (rule "simplifyUpdate1" (formula "14") (term "1,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "14") (term "2,0,0,0,1"))
         (rule "applyOnPV" (formula "14") (term "0,0,0,0,1"))
         (rule "eqClose" (formula "14") (term "0,0,1"))
         (rule "applyOnRigidFormula" (formula "14") (term "0"))
         (rule "applyOnRigidFormula" (formula "14") (term "0,0"))
         (rule "simplifyUpdate1" (formula "14") (term "1,0,0"))
         (rule "applyOnPV" (formula "14") (term "0,0,0"))
         (rule "boolean_not_equal_2" (formula "14") (term "0,0"))
         (rule "concrete_not_2" (formula "14") (term "0"))
         (rule "concrete_and_1" (formula "14"))
         (rule "allRight" (formula "14") (inst "sk=f_0"))
         (rule "allRight" (formula "14") (inst "sk=o_0"))
         (rule "closeTrue" (formula "14"))
      )
      (branch "if x_3 false"
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "13"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "11"))
         (rule "simplifyUpdate1" (formula "11") (term "1"))
         (rule "applyOnPV" (formula "11") (term "0"))
         (rule "ifthenelse_concrete3" (formula "11"))
         (rule "boolean_not_equal_2" (formula "11") (term "1"))
         (rule "concrete_or_4" (formula "11"))
         (rule "inEqSimp_geqRight" (formula "11"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "variableDeclarationAssign" (formula "13") (term "1"))
         (rule "variableDeclaration" (formula "13") (term "1") (newnames "newTable"))
         (rule "mod_axiom" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
         (rule "mul_literals" (formula "1") (term "0,0,1"))
         (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "1"))
         (rule "times_zero_1" (formula "8") (term "0,0"))
         (rule "add_zero_left" (formula "8") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "8"))
         (rule "polySimp_mulLiterals" (formula "8") (term "0"))
         (rule "elimGcdLeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(neglit(1(#))), newCapacity)") (inst "elimGcdLeftDiv=mul(div(add(Z(8(4(6(3(8(4(7(4(1(2(#))))))))))),
            mul(newCapacity, Z(2(#)))),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(8(4(6(3(8(4(7(4(1(2(#))))))))))))") (inst "elimGcd=Z(2(#))"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,0"))
         (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,1,0"))
         (rule "neg_literal" (formula "8") (term "0,0,0,0,0,1,0"))
         (rule "leq_literals" (formula "8") (term "0,0"))
         (rule "concrete_or_2" (formula "8") (term "0"))
         (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
         (rule "add_literals" (formula "8") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "8") (term "1,0,0"))
         (rule "add_zero_right" (formula "8") (term "0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
         (rule "add_literals" (formula "8") (term "0,0,0,0"))
         (rule "add_zero_left" (formula "8") (term "0,0,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
         (rule "polySimp_addComm0" (formula "8") (term "0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
         (rule "add_literals" (formula "8") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "8") (term "1,0,0"))
         (rule "add_zero_right" (formula "8") (term "0,0"))
         (rule "qeq_literals" (formula "8") (term "0"))
         (rule "concrete_or_2" (formula "8"))
         (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "1"))
         (rule "polySimp_mulAssoc" (formula "10") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
         (rule "polySimp_addComm0" (formula "10") (term "0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
         (rule "add_literals" (formula "10") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "10"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0"))
         (rule "elimGcdLeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=div(add(Z(8(4(6(3(8(4(7(4(1(2(#))))))))))),
        mul(newCapacity, Z(2(#)))),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
         (rule "leq_literals" (formula "10") (term "0,0"))
         (rule "concrete_or_2" (formula "10") (term "0"))
         (rule "neg_literal" (formula "10") (term "0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
         (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
         (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,0"))
         (rule "add_literals" (formula "10") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
         (rule "add_literals" (formula "10") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0"))
         (rule "qeq_literals" (formula "10") (term "0"))
         (rule "concrete_or_2" (formula "10"))
         (rule "arrayCreation" (formula "15") (term "1") (inst "#v0=o_arr"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "o_arr"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "dim0"))
         (rule "assignment" (formula "15") (term "1"))
         (rule "sequentialToParallel2" (formula "15"))
         (rule "simplifyUpdate3" (formula "15") (term "1,0"))
         (rule "applyOnElementary" (formula "15") (term "1,0"))
         (rule "applyOnPV" (formula "15") (term "0,1,0"))
         (rule "div_axiom" (formula "1") (term "0,1,1") (inst "quotient=quotient_0"))
         (rule "equal_literals" (formula "1") (term "0"))
         (rule "concrete_or_2" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1,1,1,1"))
         (rule "qeq_literals" (formula "1") (term "0,1"))
         (rule "ifthenelse_true_for" (formula "1") (term "1"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
         (rule "add_literals" (formula "3") (term "0,0,1"))
         (rule "polySimp_addComm1" (formula "3") (term "1"))
         (rule "add_literals" (formula "3") (term "0,1"))
         (rule "inEqSimp_homoInEq0" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "inEqSimp_homoInEq1" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq0" (formula "11"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
         (rule "polySimp_addComm1" (formula "11") (term "0"))
         (rule "applyEq" (formula "4") (term "0,1,1") (ifseqformula "1"))
         (rule "polySimp_addComm1" (formula "4") (term "1"))
         (rule "applyEq" (formula "13") (term "0") (ifseqformula "1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1"))
         (rule "polySimp_rightDist" (formula "3") (term "1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
         (rule "mul_literals" (formula "3") (term "0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11"))
         (rule "polySimp_mulComm0" (formula "11") (term "1"))
         (rule "polySimp_rightDist" (formula "11") (term "1"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
         (rule "mul_literals" (formula "11") (term "0,1"))
         (rule "inEqSimp_subsumption6" (formula "2") (ifseqformula "11"))
         (rule "greater_literals" (formula "2") (term "0,0"))
         (rule "concrete_and_1" (formula "2") (term "0"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
         (rule "mul_literals" (formula "2") (term "0,1,0"))
         (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
         (rule "mul_literals" (formula "2") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
         (rule "add_literals" (formula "2") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
         (rule "add_literals" (formula "2") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "2") (term "1,0,0"))
         (rule "add_zero_right" (formula "2") (term "0,0"))
         (rule "qeq_literals" (formula "2") (term "0"))
         (rule "concrete_or_1" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=add(Z(3(2(8(1(4(7(3(7(0(1(#))))))))))),
    mul(quotient_0, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=newCapacity") (inst "elimGcd=Z(2(#))"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
         (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0,1,0"))
         (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
         (rule "leq_literals" (formula "2") (term "0,0"))
         (rule "concrete_or_2" (formula "2") (term "0"))
         (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
         (rule "add_literals" (formula "2") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "2") (term "1,0,0"))
         (rule "add_zero_right" (formula "2") (term "0,0"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0"))
         (rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
         (rule "add_literals" (formula "2") (term "0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
         (rule "add_literals" (formula "2") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
         (rule "add_literals" (formula "2") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "2") (term "1,0,0"))
         (rule "add_zero_right" (formula "2") (term "0,0"))
         (rule "qeq_literals" (formula "2") (term "0"))
         (rule "concrete_or_2" (formula "2"))
         (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "2"))
         (rule "mul_literals" (formula "14") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "14") (term "0"))
         (rule "add_literals" (formula "14") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "14"))
         (rule "mul_literals" (formula "14") (term "1"))
         (rule "inEqSimp_contradInEq3" (formula "14") (ifseqformula "12"))
         (rule "mul_literals" (formula "14") (term "0,1,0"))
         (rule "greater_literals" (formula "14") (term "0,0"))
         (rule "concrete_impl_1" (formula "14") (term "0"))
         (rule "qeq_literals" (formula "14") (term "0"))
         (rule "concrete_and_2" (formula "14"))
         (rule "closeFalse" (formula "14"))
      )
   )
)
(branch "Null Reference (oldTable = null)"
   (rule "false_right" (formula "12"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "simplifyUpdate1" (formula "1") (term "1"))
   (rule "applyOnPV" (formula "1") (term "0"))
   (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "1"))
   (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "6"))
   (rule "polySimp_mulAssoc" (formula "8") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "0,0"))
   (rule "polySimp_addComm0" (formula "8") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "8"))
   (rule "polySimp_mulLiterals" (formula "8") (term "0"))
   (rule "inEqSimp_subsumption4" (formula "8") (ifseqformula "7"))
   (rule "mul_literals" (formula "8") (term "0,1,0"))
   (rule "greater_literals" (formula "8") (term "0,0"))
   (rule "concrete_and_1" (formula "8") (term "0"))
   (rule "leq_literals" (formula "8") (term "0"))
   (rule "concrete_or_1" (formula "8"))
   (rule "true_left" (formula "8"))
   (rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "10") (inst "i=i") (inst "j=j") (inst "i_0=i_0") (inst "j_0=j_0") (inst "i_1=i_1") (inst "i_2=i_2") (inst "i_3=i_3") (inst "i_4=i_4") (inst "j_1=j_1") (inst "i_5=i_5") (ifseqformula "4"))
   (rule "insert_constant_value" (formula "10") (term "0,0,1,1,0,0,0,0,0,0,0,0,0,0"))
   (rule "insert_constant_value" (formula "10") (term "0,0,1,0,1,0,0,0,0,0,0,0,0,0,0"))
   (rule "expand_inInt" (formula "10") (term "1"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,0,0,0,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,1,0,0,0,0,0,0,0,0,0,0"))
   (rule "replace_int_MIN" (formula "10") (term "0,1,1"))
   (rule "replace_int_MAX" (formula "10") (term "1,0,1"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "10"))
   (rule "close" (formula "23") (ifseqformula "1"))
)
)
}
